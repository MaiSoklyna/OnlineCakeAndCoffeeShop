rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can read and write only their own profiles
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId && isAdmin(request.auth.uid);
    }

    // Products - anyone can read, only admins can write
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Categories - anyone can read, only admins can write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Orders - users can create orders and read their own orders, admins can read all
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
      allow update: if request.auth != null && (
        (resource.data.userId == request.auth.uid && onlyStatusChangedToCancel()) || 
        isAdmin(request.auth.uid)
      );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Cart items - users can only access their own cart
    match /carts/{userId}/items/{itemId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Reviews - anyone can read, authenticated users can create, users can only modify their own reviews
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Admin function
    function isAdmin(uid) {
      return exists(/databases/$(database)/documents/admins/$(uid));
    }

    // Validation function for order updates (users can only cancel)
    function onlyStatusChangedToCancel() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) 
        && request.resource.data.status == 'cancelled';
    }
  }
}